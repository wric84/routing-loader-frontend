{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cwrig\\\\OneDrive\\\\Desktop\\\\GitHub\\\\React\\\\advanced-routing-project\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defer, Await } from \"react-router-dom\";\nimport { Suspense } from \"react\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 25\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(Await, {\n      resolve: events,\n      children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n        events: loadedEvents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 46\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n}\n_s(EventsPage, \"22Av1LduzrZxSsk8kXUUCix36lQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // return {isError: true, message: \"Could not retrieve events\"}\n    // throw new Response(JSON.stringify({message: \"Could not fetch events.\"}), {status: 500})\n\n    return json({\n      message: 'Could not find events'\n    }, {\n      status: 500\n    });\n  } else {\n    //Response() is a modern browser feature. Its happening in the browser. This is handier than just returning resData because you can return response in your loader\n    //const res = new Response()\n    // return response\n    const resData = await response.json;\n  }\n}\nexport function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","defer","Await","Suspense","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","events","fallback","style","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","resolve","loadedEvents","_c","loadEvents","response","fetch","ok","message","status","resData","loader","$RefreshReg$"],"sources":["C:/Users/cwrig/OneDrive/Desktop/GitHub/React/advanced-routing-project/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData, json, defer, Await } from \"react-router-dom\";\r\nimport { Suspense } from \"react\";\r\n\r\nimport EventsList from \"../components/EventsList\";\r\n\r\nfunction EventsPage() {\r\n  const {events} = useLoaderData();\r\n\r\n\r\n  return (\r\n    <Suspense fallback={<p style={{textAlign: 'center'}}>Loading...</p>}>\r\n  <Await resolve={events}>{(loadedEvents) => <EventsList events={loadedEvents}/>}</Await>\r\n  </Suspense>)\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nasync function loadEvents(){\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n\r\n  if (!response.ok) {\r\n    // return {isError: true, message: \"Could not retrieve events\"}\r\n    // throw new Response(JSON.stringify({message: \"Could not fetch events.\"}), {status: 500})\r\n\r\n    return json({message: 'Could not find events'}, {status: 500})\r\n  } else {\r\n    //Response() is a modern browser feature. Its happening in the browser. This is handier than just returning resData because you can return response in your loader\r\n    //const res = new Response()\r\n    // return response\r\n    const resData = await response.json\r\n  }\r\n}\r\n\r\nexport function loader() {\r\n  return defer({\r\n    events: loadEvents()\r\n  })\r\n}\r\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AACpE,SAASC,QAAQ,QAAQ,OAAO;AAEhC,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAACC;EAAM,CAAC,GAAGV,aAAa,CAAC,CAAC;EAGhC,oBACEO,OAAA,CAACH,QAAQ;IAACO,QAAQ,eAAEJ,OAAA;MAAGK,KAAK,EAAE;QAACC,SAAS,EAAE;MAAQ,CAAE;MAAAC,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAE;IAAAJ,QAAA,eACtEP,OAAA,CAACJ,KAAK;MAACgB,OAAO,EAAET,MAAO;MAAAI,QAAA,EAAGM,YAAY,iBAAKb,OAAA,CAACF,UAAU;QAACK,MAAM,EAAEU;MAAa;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7E,CAAC;AACb;AAACT,EAAA,CARQD,UAAU;EAAA,QACAR,aAAa;AAAA;AAAAqB,EAAA,GADvBb,UAAU;AAUnB,eAAeA,UAAU;AAEzB,eAAec,UAAUA,CAAA,EAAE;EACzB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;;IAEA,OAAOxB,IAAI,CAAC;MAACyB,OAAO,EAAE;IAAuB,CAAC,EAAE;MAACC,MAAM,EAAE;IAAG,CAAC,CAAC;EAChE,CAAC,MAAM;IACL;IACA;IACA;IACA,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAACtB,IAAI;EACrC;AACF;AAEA,OAAO,SAAS4B,MAAMA,CAAA,EAAG;EACvB,OAAO3B,KAAK,CAAC;IACXQ,MAAM,EAAEY,UAAU,CAAC;EACrB,CAAC,CAAC;AACJ;AAAC,IAAAD,EAAA;AAAAS,YAAA,CAAAT,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}